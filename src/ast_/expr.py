"""
Contains all the AST classes generated by ast_.genAst.py
"""

from abc import ABCMeta, abstractmethod
from typing import TypeVar, Generic
from dataclasses import dataclass

from tokenizer import Token


R = TypeVar("R")
Object = object


class Visitor(Generic[R], metaclass=ABCMeta):
	
	@abstractmethod
	def visitBinaryExpr( self, binary: 'Binary' ) -> R:
		pass
	
	@abstractmethod
	def visitGroupingExpr( self, grouping: 'Grouping' ) -> R:
		pass
	
	@abstractmethod
	def visitLiteralExpr( self, literal: 'Literal' ) -> R:
		pass
	
	@abstractmethod
	def visitUnaryExpr( self, unary: 'Unary' ) -> R:
		pass


class Expr(metaclass=ABCMeta):
	@abstractmethod
	def accept(self, visitor: Visitor[R]) -> R:
		pass


@dataclass
class Binary(Expr):
	left: Expr
	operator: Token
	right: Expr
	
	def accept( self, visitor: Visitor[R] ) -> R:
		return visitor.visitBinaryExpr(self)


@dataclass
class Grouping(Expr):
	expression: Expr
	
	def accept( self, visitor: Visitor[R] ) -> R:
		return visitor.visitGroupingExpr(self)


@dataclass
class Literal(Expr):
	value: Object
	
	def accept( self, visitor: Visitor[R] ) -> R:
		return visitor.visitLiteralExpr(self)


@dataclass
class Unary(Expr):
	operator: Token
	right: Expr
	
	def accept( self, visitor: Visitor[R] ) -> R:
		return visitor.visitUnaryExpr(self)
